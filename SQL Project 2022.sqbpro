<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Cam/Downloads/stores.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="4999"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:maincustomers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="158"/><column index="2" value="262"/><column index="3" value="159"/><column index="4" value="161"/><column index="5" value="152"/><column index="6" value="242"/><column index="7" value="188"/><column index="8" value="145"/><column index="9" value="101"/><column index="10" value="106"/><column index="11" value="104"/><column index="12" value="237"/><column index="13" value="102"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="project.sql">-- We have 8 tables in our database: customers, employees, offices, orderdetails, orders, payments, productlines, and products respectfully.
-- The employees table relates to office via officeCode, and to the customers table via salesRepEmployeeNumber.
-- The customers table relates to both the orders and payments tables via customerNumber.
-- The orders table relates to the orderdetails table via orderNumber 
-- The products table relates to the orderdetails table via productCode, and the productlines table via productLine.

-- Database Summary:

SELECT 'Customers' AS table_name, 13 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM customers
 
UNION ALL

SELECT 'Employees' AS table_name, 8 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM employees
  
UNION ALL

SELECT 'Offices' AS table_name, 9 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM offices
  
UNION ALL 

SELECT 'Order Details' AS table_name, 5 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM orderdetails
  
UNION ALL

SELECT 'Orders' AS table_name, 7 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM orders
  
UNION ALL 

SELECT 'Payments' AS table_name, 4 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM payments
  
UNION ALL

SELECT 'Product Lines' AS table_name, 4 AS number_of_attributes, COUNT(*) AS number_of_rows
  FROM productlines
  
UNION ALL 

SELECT 'Products' AS table_name, 9 AS number_of_attributes, COUnT(*) AS number_of_rows
  FROM products;

-- Products Low in Stock:

SELECT productCode, ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock
														  FROM products p
														 WHERE od.productCode = p.productCode), 2) AS low_stock
  FROM orderdetails od
 GROUP BY productCode
 ORDER BY low_stock
 LIMIT 10;

--  Product Performance:

SELECT productCode, SUM(quantityOrdered * priceEach) AS product_performance
  FROM orderdetails
 GROUP BY productCode
 ORDER BY product_performance DESC
 LIMIT 10;

--  Priority Products to Restock:

WITH

low_stock_table AS (
SELECT productCode, ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock
														  FROM products p
														 WHERE od.productCode = p.productCode), 2) AS low_stock
  FROM orderdetails od
 GROUP BY productCode
 ORDER BY low_stock
 LIMIT 10
) 
SELECT productCode, SUM(quantityOrdered * priceEach) AS product_performance
  FROM orderdetails
 WHERE productCode IN (SELECT productCode
						 FROM low_stock_table)
 GROUP BY productCode
 ORDER BY product_performance DESC
 LIMIT 10;

--  Revenue by Customer: 

SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS revenue
  FROM products p 
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber;

--  Top 5 VIP Customers: 

WITH 

money_from_customers AS (
SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS revenue
  FROM products p 
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

SELECT contactLastName, contactFirstName, city, country, mc.revenue 
  FROM customers c
  JOIN money_from_customers mc
    ON mc.customerNumber = c.customerNumber
 ORDER BY mc.revenue DESC
 LIMIT 5;

-- Least Engaged customers
WITH

money_from_customers AS (
SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS revenue
  FROM products p 
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

SELECT contactLastName, contactFirstName, city, country, mc.revenue 
  FROM customers c
  JOIN money_from_customers mc
    ON mc.customerNumber = c.customerNumber
 ORDER BY mc.revenue 
 LIMIT 5;
 
-- Customer Lifetime Value (LTV):
WITH

money_from_customers AS (
SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS revenue
  FROM products p 
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

SELECT AVG(mc.revenue) AS ltv
  FROM money_from_customers mc;</sql><current_tab id="0"/></tab_sql></sqlb_project>
